let type Stack
{
    (head, next, count=1) where next is StackEntry
}

let type StackEntry
{
    (value, next) where next is StackEntry
}

let ext Stack
{
    let fn push value:Any
    {
       let k: StackEntry = (self::head, self::next) &
       self::head = value &
       self::count++ &
       self::next = k
    }
    
    let fn pop => Any
    {
        let head = self::head &
        self::head = self::next::value &
        self::count-- &
        self::next = self::next::next &
        head        
    }
    
    let fn peek => Any
    {
        self::head
    }
}

let fn superFunc largeAName:largeATypeName largeBName:largeBypeName largeCName:largeCTypeName => largeDTypeName
{
    a*b*c
}