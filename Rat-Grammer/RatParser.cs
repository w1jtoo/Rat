//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/lord_faceless/RiderProjects/Rat/Rat-Grammer/Antlr/Rat.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class RatParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EXTERN=1, COMPAREOPERATOR=2, IF=3, ELSE=4, WHERE=5, IN=6, IS=7, MUT=8, 
		FN=9, PARALLEL=10, ARROW=11, ANY=12, OPTIONAL=13, NIL=14, LET=15, LETG=16, 
		TYPEKW=17, EXT=18, ENDEXT=19, AND=20, ANDEQUALS=21, OR=22, NOT=23, OREQUALS=24, 
		TWODOTS=25, COLON=26, SEMICOLON=27, EXPRSEPARATOR=28, ID=29, COMMA=30, 
		XOREQUALS=31, XOR=32, ADDEQUALS=33, PLUSPLUS=34, ADD=35, MINUSEQUALS=36, 
		MINUS=37, PRODUCTEQUALS=38, PRODUCT=39, DIVIDEEQUALS=40, DIVIDE=41, EQUALS=42, 
		INEQUALS=43, GREATER=44, LESS=45, GREATEREQUAL=46, LESSEQUAL=47, SET=48, 
		LPARENTHESIS=49, RPARENTHESIS=50, LBRACE=51, RBRACE=52, MEMDERCALLOPERATOR=53, 
		TRUE=54, FALSE=55, DIGIT=56, NULLCHAR=57, CHAR1=58, CHAR2=59, CHAR3=60, 
		CHAR4=61, CHAR5=62, CHAR6=63, CHAR7=64, CHAR8=65, CHAR9=66, CHAR10=67, 
		CHAR11=68, CHAR12=69, CHAR13=70, CHAR14=71, CHAR15=72, CHAR16=73, CHAR17=74, 
		CHAR18=75, CHAR19=76, CHAR20=77, CHAR21=78, CHAR22=79, CHAR23=80, CHAR24=81, 
		CHAR25=82, CHAR26=83, CHAR27=84, CHAR28=85, CHAR29=86, CHAR30=87, CHAR31=88, 
		ESCAPEDQUOTE=89, ESCAPEDDOUBLEQUOTE=90, QUOTE=91, DOUBLEQUOTE=92, QUOTEDSTRING=93, 
		DOUBLEQUOTEDSTRING=94, WHITESPACE=95, NEWLINE=96, LINEFEED=97, INDENT=98, 
		DEDENT=99;
	public const int
		RULE_code = 0, RULE_statementblock = 1, RULE_statement = 2, RULE_externstmt = 3, 
		RULE_expressions = 4, RULE_expression = 5, RULE_leftoperator = 6, RULE_zerooperator = 7, 
		RULE_firstoperator = 8, RULE_secondoperator = 9, RULE_thirdoperator = 10, 
		RULE_funcdef = 11, RULE_funcargs = 12, RULE_funcarg = 13, RULE_funccall = 14, 
		RULE_exprargs = 15, RULE_ifexpr = 16, RULE_ifstmt = 17, RULE_line = 18, 
		RULE_bool = 19, RULE_range = 20, RULE_string = 21, RULE_number = 22;
	public static readonly string[] ruleNames = {
		"code", "statementblock", "statement", "externstmt", "expressions", "expression", 
		"leftoperator", "zerooperator", "firstoperator", "secondoperator", "thirdoperator", 
		"funcdef", "funcargs", "funcarg", "funccall", "exprargs", "ifexpr", "ifstmt", 
		"line", "bool", "range", "string", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'extern'", null, "'if'", "'else'", "'where'", "'in'", "'is'", "'mut'", 
		"'fn'", "'parallel'", "'=>'", "'Any'", "'Optional'", "'Nil'", "'let'", 
		"'LET'", "'type'", "'ext'", "'endext'", "'and'", "'&='", "'or'", "'not'", 
		"'|='", "'..'", "':'", "';'", null, null, "','", "'^='", null, "'+='", 
		"'++'", "'+'", "'-='", "'-'", "'*='", "'*'", "'/='", "'/'", "'=='", "'!='", 
		"'>'", "'<'", "'>='", "'<='", "'='", "'('", "')'", "'{'", "'}'", "'::'", 
		"'true'", "'false'", null, "'\\0'", "'\\1'", "'\\2'", "'\\3'", "'\\4'", 
		"'\\5'", "'\\6'", "'\\7'", "'\\8'", "'\\9'", "'\\10'", "'\\11'", "'\\12'", 
		"'\\13'", "'\\14'", "'\\15'", "'\\16'", "'\\17'", "'\\18'", "'\\19'", 
		"'\\20'", "'\\21'", "'\\22'", "'\\23'", "'\\24'", "'\\25'", "'\\26'", 
		"'\\27'", "'\\28'", "'\\29'", "'\\30'", "'\\31'", "'\\''", "'\\\"'", "'''", 
		"'\"'", null, null, "' '", null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EXTERN", "COMPAREOPERATOR", "IF", "ELSE", "WHERE", "IN", "IS", 
		"MUT", "FN", "PARALLEL", "ARROW", "ANY", "OPTIONAL", "NIL", "LET", "LETG", 
		"TYPEKW", "EXT", "ENDEXT", "AND", "ANDEQUALS", "OR", "NOT", "OREQUALS", 
		"TWODOTS", "COLON", "SEMICOLON", "EXPRSEPARATOR", "ID", "COMMA", "XOREQUALS", 
		"XOR", "ADDEQUALS", "PLUSPLUS", "ADD", "MINUSEQUALS", "MINUS", "PRODUCTEQUALS", 
		"PRODUCT", "DIVIDEEQUALS", "DIVIDE", "EQUALS", "INEQUALS", "GREATER", 
		"LESS", "GREATEREQUAL", "LESSEQUAL", "SET", "LPARENTHESIS", "RPARENTHESIS", 
		"LBRACE", "RBRACE", "MEMDERCALLOPERATOR", "TRUE", "FALSE", "DIGIT", "NULLCHAR", 
		"CHAR1", "CHAR2", "CHAR3", "CHAR4", "CHAR5", "CHAR6", "CHAR7", "CHAR8", 
		"CHAR9", "CHAR10", "CHAR11", "CHAR12", "CHAR13", "CHAR14", "CHAR15", "CHAR16", 
		"CHAR17", "CHAR18", "CHAR19", "CHAR20", "CHAR21", "CHAR22", "CHAR23", 
		"CHAR24", "CHAR25", "CHAR26", "CHAR27", "CHAR28", "CHAR29", "CHAR30", 
		"CHAR31", "ESCAPEDQUOTE", "ESCAPEDDOUBLEQUOTE", "QUOTE", "DOUBLEQUOTE", 
		"QUOTEDSTRING", "DOUBLEQUOTEDSTRING", "WHITESPACE", "NEWLINE", "LINEFEED", 
		"INDENT", "DEDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rat.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RatParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RatParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RatParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CodeContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 46; statement();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXTERN) | (1L << IF) | (1L << LET) | (1L << ID))) != 0) || _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementblockContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(RatParser.NEWLINE, 0); }
		public ITerminalNode INDENT() { return GetToken(RatParser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(RatParser.DEDENT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterStatementblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitStatementblock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementblockContext statementblock() {
		StatementblockContext _localctx = new StatementblockContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(NEWLINE);
			State = 52; Match(INDENT);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 53; statement();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXTERN) | (1L << IF) | (1L << LET) | (1L << ID))) != 0) || _la==NEWLINE );
			State = 58; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(RatParser.NEWLINE, 0); }
		public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public ExternstmtContext externstmt() {
			return GetRuleContext<ExternstmtContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(RatParser.SEMICOLON, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTERN:
			case IF:
			case LET:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 64;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LET:
					{
					State = 60; funcdef();
					}
					break;
				case IF:
					{
					State = 61; ifstmt();
					}
					break;
				case ID:
					{
					State = 62; funccall();
					}
					break;
				case EXTERN:
					{
					State = 63; externstmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 66; Match(SEMICOLON);
					}
				}

				State = 69; Match(NEWLINE);
				}
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternstmtContext : ParserRuleContext {
		public ITerminalNode EXTERN() { return GetToken(RatParser.EXTERN, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(RatParser.COLON, 0); }
		public ITerminalNode NEWLINE() { return GetToken(RatParser.NEWLINE, 0); }
		public ITerminalNode INDENT() { return GetToken(RatParser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(RatParser.DEDENT, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ExternstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterExternstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitExternstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternstmtContext externstmt() {
		ExternstmtContext _localctx = new ExternstmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_externstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(EXTERN);
			State = 75; @string();
			State = 76; Match(COLON);
			State = 77; Match(NEWLINE);
			State = 78; Match(INDENT);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==QUOTEDSTRING || _la==DOUBLEQUOTEDSTRING) {
				{
				{
				State = 79; line();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] EXPRSEPARATOR() { return GetTokens(RatParser.EXPRSEPARATOR); }
		public ITerminalNode EXPRSEPARATOR(int i) {
			return GetToken(RatParser.EXPRSEPARATOR, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 8, RULE_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; expression(0);
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 88; Match(EXPRSEPARATOR);
					State = 89; expression(0);
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public IfexprContext ifexpr() {
			return GetRuleContext<IfexprContext>(0);
		}
		public LeftoperatorContext leftoperator() {
			return GetRuleContext<LeftoperatorContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode ID() { return GetToken(RatParser.ID, 0); }
		public ITerminalNode COMPAREOPERATOR() { return GetToken(RatParser.COMPAREOPERATOR, 0); }
		public ZerooperatorContext zerooperator() {
			return GetRuleContext<ZerooperatorContext>(0);
		}
		public FirstoperatorContext firstoperator() {
			return GetRuleContext<FirstoperatorContext>(0);
		}
		public SecondoperatorContext secondoperator() {
			return GetRuleContext<SecondoperatorContext>(0);
		}
		public ThirdoperatorContext thirdoperator() {
			return GetRuleContext<ThirdoperatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 96; funccall();
				}
				break;
			case 2:
				{
				State = 97; ifexpr();
				}
				break;
			case 3:
				{
				State = 98; leftoperator();
				State = 99; expression(10);
				}
				break;
			case 4:
				{
				State = 101; @string();
				}
				break;
			case 5:
				{
				State = 102; @bool();
				}
				break;
			case 6:
				{
				State = 103; range();
				}
				break;
			case 7:
				{
				State = 104; number();
				}
				break;
			case 8:
				{
				State = 105; Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 127;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 108;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 109; Match(COMPAREOPERATOR);
						State = 110; expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 111;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 112; zerooperator();
						State = 113; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 116; firstoperator();
						State = 117; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 119;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 120; secondoperator();
						State = 121; expression(8);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 124; thirdoperator();
						State = 125; expression(7);
						}
						break;
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LeftoperatorContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(RatParser.NOT, 0); }
		public ITerminalNode MINUS() { return GetToken(RatParser.MINUS, 0); }
		public LeftoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterLeftoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitLeftoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftoperatorContext leftoperator() {
		LeftoperatorContext _localctx = new LeftoperatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_leftoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZerooperatorContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(RatParser.SET, 0); }
		public ZerooperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zerooperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterZerooperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitZerooperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZerooperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZerooperatorContext zerooperator() {
		ZerooperatorContext _localctx = new ZerooperatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_zerooperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(SET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstoperatorContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(RatParser.ADD, 0); }
		public ITerminalNode OR() { return GetToken(RatParser.OR, 0); }
		public ITerminalNode MINUS() { return GetToken(RatParser.MINUS, 0); }
		public FirstoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFirstoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFirstoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstoperatorContext firstoperator() {
		FirstoperatorContext _localctx = new FirstoperatorContext(Context, State);
		EnterRule(_localctx, 16, RULE_firstoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << ADD) | (1L << MINUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondoperatorContext : ParserRuleContext {
		public ITerminalNode PRODUCT() { return GetToken(RatParser.PRODUCT, 0); }
		public ITerminalNode DIVIDE() { return GetToken(RatParser.DIVIDE, 0); }
		public ITerminalNode AND() { return GetToken(RatParser.AND, 0); }
		public SecondoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterSecondoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitSecondoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondoperatorContext secondoperator() {
		SecondoperatorContext _localctx = new SecondoperatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_secondoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << PRODUCT) | (1L << DIVIDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThirdoperatorContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(RatParser.IN, 0); }
		public ITerminalNode IS() { return GetToken(RatParser.IS, 0); }
		public ThirdoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thirdoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterThirdoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitThirdoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThirdoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThirdoperatorContext thirdoperator() {
		ThirdoperatorContext _localctx = new ThirdoperatorContext(Context, State);
		EnterRule(_localctx, 20, RULE_thirdoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(RatParser.LET, 0); }
		public ITerminalNode ID() { return GetToken(RatParser.ID, 0); }
		public ITerminalNode LPARENTHESIS() { return GetToken(RatParser.LPARENTHESIS, 0); }
		public ITerminalNode RPARENTHESIS() { return GetToken(RatParser.RPARENTHESIS, 0); }
		public ITerminalNode SET() { return GetToken(RatParser.SET, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public FuncargsContext funcargs() {
			return GetRuleContext<FuncargsContext>(0);
		}
		public FuncdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFuncdef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFuncdef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefContext funcdef() {
		FuncdefContext _localctx = new FuncdefContext(Context, State);
		EnterRule(_localctx, 22, RULE_funcdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(LET);
			State = 143; Match(ID);
			State = 144; Match(LPARENTHESIS);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 145; funcargs();
				}
			}

			State = 148; Match(RPARENTHESIS);
			State = 149; Match(SET);
			State = 150; expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncargsContext : ParserRuleContext {
		public FuncargContext[] funcarg() {
			return GetRuleContexts<FuncargContext>();
		}
		public FuncargContext funcarg(int i) {
			return GetRuleContext<FuncargContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RatParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RatParser.COMMA, i);
		}
		public FuncargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcargs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFuncargs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFuncargs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncargsContext funcargs() {
		FuncargsContext _localctx = new FuncargsContext(Context, State);
		EnterRule(_localctx, 24, RULE_funcargs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; funcarg();
			State = 157;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 153; Match(COMMA);
					State = 154; funcarg();
					}
					} 
				}
				State = 159;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncargContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(RatParser.ID, 0); }
		public FuncargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcarg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFuncarg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFuncarg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncarg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncargContext funcarg() {
		FuncargContext _localctx = new FuncargContext(Context, State);
		EnterRule(_localctx, 26, RULE_funcarg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(RatParser.ID, 0); }
		public ITerminalNode LPARENTHESIS() { return GetToken(RatParser.LPARENTHESIS, 0); }
		public ExprargsContext exprargs() {
			return GetRuleContext<ExprargsContext>(0);
		}
		public ITerminalNode RPARENTHESIS() { return GetToken(RatParser.RPARENTHESIS, 0); }
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFunccall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFunccall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 28, RULE_funccall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(ID);
			State = 163; Match(LPARENTHESIS);
			State = 164; exprargs();
			State = 165; Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprargsContext : ParserRuleContext {
		public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RatParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RatParser.COMMA, i);
		}
		public ExprargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprargs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterExprargs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitExprargs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprargsContext exprargs() {
		ExprargsContext _localctx = new ExprargsContext(Context, State);
		EnterRule(_localctx, 30, RULE_exprargs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; expressions();
			State = 172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 168; Match(COMMA);
					State = 169; expressions();
					}
					} 
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexprContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(RatParser.IF, 0); }
		public ITerminalNode LPARENTHESIS() { return GetToken(RatParser.LPARENTHESIS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPARENTHESIS() { return GetToken(RatParser.RPARENTHESIS, 0); }
		public ITerminalNode ELSE() { return GetToken(RatParser.ELSE, 0); }
		public IfexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterIfexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitIfexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexprContext ifexpr() {
		IfexprContext _localctx = new IfexprContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(IF);
			State = 176; Match(LPARENTHESIS);
			State = 177; expression(0);
			State = 178; Match(RPARENTHESIS);
			State = 179; expression(0);
			State = 180; Match(ELSE);
			State = 181; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(RatParser.IF, 0); }
		public ITerminalNode LPARENTHESIS() { return GetToken(RatParser.LPARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPARENTHESIS() { return GetToken(RatParser.RPARENTHESIS, 0); }
		public StatementblockContext[] statementblock() {
			return GetRuleContexts<StatementblockContext>();
		}
		public StatementblockContext statementblock(int i) {
			return GetRuleContext<StatementblockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(RatParser.ELSE, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(IF);
			State = 184; Match(LPARENTHESIS);
			State = 185; expression(0);
			State = 186; Match(RPARENTHESIS);
			State = 187; statementblock();
			State = 188; Match(ELSE);
			State = 189; statementblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(RatParser.NEWLINE, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 36, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; @string();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 192; Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(RatParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(RatParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 38, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ITerminalNode TWODOTS() { return GetToken(RatParser.TWODOTS, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 40, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; number();
			State = 198; Match(TWODOTS);
			State = 199; number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode QUOTEDSTRING() { return GetToken(RatParser.QUOTEDSTRING, 0); }
		public ITerminalNode DOUBLEQUOTEDSTRING() { return GetToken(RatParser.DOUBLEQUOTEDSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 42, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_la = TokenStream.LA(1);
			if ( !(_la==QUOTEDSTRING || _la==DOUBLEQUOTEDSTRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(RatParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(RatParser.DIGIT, i);
		}
		public ITerminalNode MINUS() { return GetToken(RatParser.MINUS, 0); }
		public ITerminalNode ADD() { return GetToken(RatParser.ADD, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 44, RULE_number);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADD || _la==MINUS) {
				{
				State = 203;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 207;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 206; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x65', '\xD6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x6', '\x2', '\x32', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\x33', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', 
		'\x3', '\x39', '\n', '\x3', '\r', '\x3', '\xE', '\x3', ':', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x43', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\x46', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'K', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', 'S', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', 'V', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', ']', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '`', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'm', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '\x82', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x85', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x95', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x9E', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xA1', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xAD', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\xB0', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xC4', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x5', '\x18', '\xCF', 
		'\n', '\x18', '\x3', '\x18', '\x6', '\x18', '\xD2', '\n', '\x18', '\r', 
		'\x18', '\xE', '\x18', '\xD3', '\x3', '\x18', '\x5', '^', '\x9F', '\xAE', 
		'\x3', '\f', '\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x2', '\t', '\x4', '\x2', '\x19', '\x19', '\'', 
		'\'', '\x5', '\x2', '\x18', '\x18', '%', '%', '\'', '\'', '\x5', '\x2', 
		'\x16', '\x16', ')', ')', '+', '+', '\x3', '\x2', '\b', '\t', '\x3', '\x2', 
		'\x38', '\x39', '\x3', '\x2', '_', '`', '\x4', '\x2', '%', '%', '\'', 
		'\'', '\x2', '\xD9', '\x2', '\x31', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x6', 'J', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'L', '\x3', '\x2', '\x2', '\x2', '\n', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'l', '\x3', '\x2', '\x2', '\x2', '\xE', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x88', '\x3', '\x2', '\x2', '\x2', '\x12', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x18', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xA9', '\x3', '\x2', '\x2', '\x2', '\"', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xB9', '\x3', '\x2', '\x2', '\x2', '&', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xC5', '\x3', '\x2', '\x2', '\x2', '*', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xCB', '\x3', '\x2', '\x2', '\x2', '.', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\x5', '\x6', '\x4', '\x2', 
		'\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\a', '\x62', '\x2', '\x2', '\x36', '\x38', '\a', '\x64', 
		'\x2', '\x2', '\x37', '\x39', '\x5', '\x6', '\x4', '\x2', '\x38', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '\x65', '\x2', '\x2', 
		'=', '\x5', '\x3', '\x2', '\x2', '\x2', '>', '\x43', '\x5', '\x18', '\r', 
		'\x2', '?', '\x43', '\x5', '$', '\x13', '\x2', '@', '\x43', '\x5', '\x1E', 
		'\x10', '\x2', '\x41', '\x43', '\x5', '\b', '\x5', '\x2', '\x42', '>', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '?', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x45', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\a', 
		'\x1D', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\a', '\x62', '\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'K', '\a', '\x62', '\x2', '\x2', 'J', '\x42', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\a', '\x3', '\x2', '\x2', 'M', 'N', '\x5', 
		',', '\x17', '\x2', 'N', 'O', '\a', '\x1C', '\x2', '\x2', 'O', 'P', '\a', 
		'\x62', '\x2', '\x2', 'P', 'T', '\a', '\x64', '\x2', '\x2', 'Q', 'S', 
		'\x5', '&', '\x14', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 
		'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x65', '\x2', '\x2', 
		'X', '\t', '\x3', '\x2', '\x2', '\x2', 'Y', '^', '\x5', '\f', '\a', '\x2', 
		'Z', '[', '\a', '\x1E', '\x2', '\x2', '[', ']', '\x5', '\f', '\a', '\x2', 
		'\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', 
		'\x2', '\x2', '_', '\v', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\b', '\a', '\x1', '\x2', '\x62', 
		'm', '\x5', '\x1E', '\x10', '\x2', '\x63', 'm', '\x5', '\"', '\x12', '\x2', 
		'\x64', '\x65', '\x5', '\xE', '\b', '\x2', '\x65', '\x66', '\x5', '\f', 
		'\a', '\f', '\x66', 'm', '\x3', '\x2', '\x2', '\x2', 'g', 'm', '\x5', 
		',', '\x17', '\x2', 'h', 'm', '\x5', '(', '\x15', '\x2', 'i', 'm', '\x5', 
		'*', '\x16', '\x2', 'j', 'm', '\x5', '.', '\x18', '\x2', 'k', 'm', '\a', 
		'\x1F', '\x2', '\x2', 'l', '\x61', '\x3', '\x2', '\x2', '\x2', 'l', '\x63', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x64', '\x3', '\x2', '\x2', '\x2', 'l', 
		'g', '\x3', '\x2', '\x2', '\x2', 'l', 'h', '\x3', '\x2', '\x2', '\x2', 
		'l', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', '\x83', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\f', '\r', '\x2', '\x2', 'o', 'p', '\a', '\x4', '\x2', 
		'\x2', 'p', '\x82', '\x5', '\f', '\a', '\xE', 'q', 'r', '\f', '\v', '\x2', 
		'\x2', 'r', 's', '\x5', '\x10', '\t', '\x2', 's', 't', '\x5', '\f', '\a', 
		'\f', 't', '\x82', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\f', '\n', '\x2', 
		'\x2', 'v', 'w', '\x5', '\x12', '\n', '\x2', 'w', 'x', '\x5', '\f', '\a', 
		'\v', 'x', '\x82', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\f', '\t', '\x2', 
		'\x2', 'z', '{', '\x5', '\x14', '\v', '\x2', '{', '|', '\x5', '\f', '\a', 
		'\n', '|', '\x82', '\x3', '\x2', '\x2', '\x2', '}', '~', '\f', '\b', '\x2', 
		'\x2', '~', '\x7F', '\x5', '\x16', '\f', '\x2', '\x7F', '\x80', '\x5', 
		'\f', '\a', '\t', '\x80', '\x82', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'n', '\x3', '\x2', '\x2', '\x2', '\x81', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x81', 'u', '\x3', '\x2', '\x2', '\x2', '\x81', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '}', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\t', 
		'\x2', '\x2', '\x2', '\x87', '\xF', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\a', '\x32', '\x2', '\x2', '\x89', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\t', '\x3', '\x2', '\x2', '\x8B', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\t', '\x4', '\x2', '\x2', '\x8D', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\t', '\x5', '\x2', 
		'\x2', '\x8F', '\x17', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', 
		'\x11', '\x2', '\x2', '\x91', '\x92', '\a', '\x1F', '\x2', '\x2', '\x92', 
		'\x94', '\a', '\x33', '\x2', '\x2', '\x93', '\x95', '\x5', '\x1A', '\xE', 
		'\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\a', '\x34', '\x2', '\x2', '\x97', '\x98', '\a', '\x32', '\x2', 
		'\x2', '\x98', '\x99', '\x5', '\n', '\x6', '\x2', '\x99', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9F', '\x5', '\x1C', '\xF', '\x2', '\x9B', 
		'\x9C', '\a', ' ', '\x2', '\x2', '\x9C', '\x9E', '\x5', '\x1C', '\xF', 
		'\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', 
		'\x1F', '\x2', '\x2', '\xA3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x1F', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x33', '\x2', 
		'\x2', '\xA6', '\xA7', '\x5', ' ', '\x11', '\x2', '\xA7', '\xA8', '\a', 
		'\x34', '\x2', '\x2', '\xA8', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAE', '\x5', '\n', '\x6', '\x2', '\xAA', '\xAB', '\a', ' ', '\x2', '\x2', 
		'\xAB', '\xAD', '\x5', '\n', '\x6', '\x2', '\xAC', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '!', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xB2', '\a', '\x5', '\x2', '\x2', '\xB2', '\xB3', 
		'\a', '\x33', '\x2', '\x2', '\xB3', '\xB4', '\x5', '\f', '\a', '\x2', 
		'\xB4', '\xB5', '\a', '\x34', '\x2', '\x2', '\xB5', '\xB6', '\x5', '\f', 
		'\a', '\x2', '\xB6', '\xB7', '\a', '\x6', '\x2', '\x2', '\xB7', '\xB8', 
		'\x5', '\f', '\a', '\x2', '\xB8', '#', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\x5', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x33', '\x2', 
		'\x2', '\xBB', '\xBC', '\x5', '\f', '\a', '\x2', '\xBC', '\xBD', '\a', 
		'\x34', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\x4', '\x3', '\x2', '\xBE', 
		'\xBF', '\a', '\x6', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x4', '\x3', 
		'\x2', '\xC0', '%', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC3', '\x5', 
		',', '\x17', '\x2', '\xC2', '\xC4', '\a', '\x62', '\x2', '\x2', '\xC3', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\'', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\t', 
		'\x6', '\x2', '\x2', '\xC6', ')', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC8', '\x5', '.', '\x18', '\x2', '\xC8', '\xC9', '\a', '\x1B', '\x2', 
		'\x2', '\xC9', '\xCA', '\x5', '.', '\x18', '\x2', '\xCA', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\t', '\a', '\x2', '\x2', '\xCC', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', '\t', '\b', '\x2', '\x2', 
		'\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', 
		'\a', ':', '\x2', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x33', ':', '\x42', '\x45', 'J', 'T', '^', 
		'l', '\x81', '\x83', '\x94', '\x9F', '\xAE', '\xC3', '\xCE', '\xD3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
