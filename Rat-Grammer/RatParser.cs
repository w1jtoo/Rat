//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/lord_faceless/RiderProjects/Rat/Rat-Grammer/Antlr/Rat.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class RatParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMPAREOPERATOR=1, IF=2, ELSE=3, WHERE=4, IN=5, IS=6, MUT=7, FN=8, PARALLEL=9, 
		ARROW=10, ANY=11, OPTIONAL=12, NIL=13, LET=14, LETG=15, TYPEKW=16, EXT=17, 
		ENDEXT=18, AND=19, ANDEQUALS=20, OR=21, NOT=22, OREQUALS=23, TWODOTS=24, 
		COLON=25, SEMICOLON=26, EXPRSEPARATOR=27, ID=28, COMMA=29, XOREQUALS=30, 
		XOR=31, ADDEQUALS=32, PLUSPLUS=33, ADD=34, MINUSEQUALS=35, MINUS=36, PRODUCTEQUALS=37, 
		PRODUCT=38, DIVIDEEQUALS=39, DIVIDE=40, EQUALS=41, INEQUALS=42, GREATER=43, 
		LESS=44, GREATEREQUAL=45, LESSEQUAL=46, SET=47, LPARENTHESIS=48, RPARENTHESIS=49, 
		LBRACE=50, RBRACE=51, MEMDERCALLOPERATOR=52, TRUE=53, FALSE=54, DIGIT=55, 
		NULLCHAR=56, CHAR1=57, CHAR2=58, CHAR3=59, CHAR4=60, CHAR5=61, CHAR6=62, 
		CHAR7=63, CHAR8=64, CHAR9=65, CHAR10=66, CHAR11=67, CHAR12=68, CHAR13=69, 
		CHAR14=70, CHAR15=71, CHAR16=72, CHAR17=73, CHAR18=74, CHAR19=75, CHAR20=76, 
		CHAR21=77, CHAR22=78, CHAR23=79, CHAR24=80, CHAR25=81, CHAR26=82, CHAR27=83, 
		CHAR28=84, CHAR29=85, CHAR30=86, CHAR31=87, ESCAPEDQUOTE=88, ESCAPEDDOUBLEQUOTE=89, 
		QUOTE=90, DOUBLEQUOTE=91, QUOTEDSTRING=92, DOUBLEQUOTEDSTRING=93, WHITESPACE=94, 
		NEWLINE=95, LINEFEED=96, INDENT=97, DEDENT=98;
	public const int
		RULE_code = 0, RULE_statementblock = 1, RULE_statement = 2, RULE_expressions = 3, 
		RULE_expression = 4, RULE_leftoperator = 5, RULE_zerooperator = 6, RULE_firstoperator = 7, 
		RULE_secondoperator = 8, RULE_thirdoperator = 9, RULE_funcdef = 10, RULE_funcargs = 11, 
		RULE_funcarg = 12, RULE_funccall = 13, RULE_exprargs = 14, RULE_ifexpr = 15, 
		RULE_ifstmt = 16, RULE_bool = 17, RULE_range = 18, RULE_string = 19, RULE_number = 20;
	public static readonly string[] ruleNames = {
		"code", "statementblock", "statement", "expressions", "expression", "leftoperator", 
		"zerooperator", "firstoperator", "secondoperator", "thirdoperator", "funcdef", 
		"funcargs", "funcarg", "funccall", "exprargs", "ifexpr", "ifstmt", "bool", 
		"range", "string", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'if'", "'else'", "'where'", "'in'", "'is'", "'mut'", "'fn'", 
		"'parallel'", "'=>'", "'Any'", "'Optional'", "'Nil'", "'let'", "'LET'", 
		"'type'", "'ext'", "'endext'", "'and'", "'&='", "'or'", "'not'", "'|='", 
		"'..'", "':'", "';'", null, null, "','", "'^='", null, "'+='", "'++'", 
		"'+'", "'-='", "'-'", "'*='", "'*'", "'/='", "'/'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'='", "'('", "')'", "'{'", "'}'", "'::'", "'true'", 
		"'false'", null, "'\\0'", "'\\1'", "'\\2'", "'\\3'", "'\\4'", "'\\5'", 
		"'\\6'", "'\\7'", "'\\8'", "'\\9'", "'\\10'", "'\\11'", "'\\12'", "'\\13'", 
		"'\\14'", "'\\15'", "'\\16'", "'\\17'", "'\\18'", "'\\19'", "'\\20'", 
		"'\\21'", "'\\22'", "'\\23'", "'\\24'", "'\\25'", "'\\26'", "'\\27'", 
		"'\\28'", "'\\29'", "'\\30'", "'\\31'", "'\\''", "'\\\"'", "'''", "'\"'", 
		null, null, "' '", null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMPAREOPERATOR", "IF", "ELSE", "WHERE", "IN", "IS", "MUT", "FN", 
		"PARALLEL", "ARROW", "ANY", "OPTIONAL", "NIL", "LET", "LETG", "TYPEKW", 
		"EXT", "ENDEXT", "AND", "ANDEQUALS", "OR", "NOT", "OREQUALS", "TWODOTS", 
		"COLON", "SEMICOLON", "EXPRSEPARATOR", "ID", "COMMA", "XOREQUALS", "XOR", 
		"ADDEQUALS", "PLUSPLUS", "ADD", "MINUSEQUALS", "MINUS", "PRODUCTEQUALS", 
		"PRODUCT", "DIVIDEEQUALS", "DIVIDE", "EQUALS", "INEQUALS", "GREATER", 
		"LESS", "GREATEREQUAL", "LESSEQUAL", "SET", "LPARENTHESIS", "RPARENTHESIS", 
		"LBRACE", "RBRACE", "MEMDERCALLOPERATOR", "TRUE", "FALSE", "DIGIT", "NULLCHAR", 
		"CHAR1", "CHAR2", "CHAR3", "CHAR4", "CHAR5", "CHAR6", "CHAR7", "CHAR8", 
		"CHAR9", "CHAR10", "CHAR11", "CHAR12", "CHAR13", "CHAR14", "CHAR15", "CHAR16", 
		"CHAR17", "CHAR18", "CHAR19", "CHAR20", "CHAR21", "CHAR22", "CHAR23", 
		"CHAR24", "CHAR25", "CHAR26", "CHAR27", "CHAR28", "CHAR29", "CHAR30", 
		"CHAR31", "ESCAPEDQUOTE", "ESCAPEDDOUBLEQUOTE", "QUOTE", "DOUBLEQUOTE", 
		"QUOTEDSTRING", "DOUBLEQUOTEDSTRING", "WHITESPACE", "NEWLINE", "LINEFEED", 
		"INDENT", "DEDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rat.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RatParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RatParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RatParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CodeContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 42; statement();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << LET) | (1L << ID))) != 0) || _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementblockContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(RatParser.NEWLINE, 0); }
		public ITerminalNode INDENT() { return GetToken(RatParser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(RatParser.DEDENT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterStatementblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitStatementblock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementblockContext statementblock() {
		StatementblockContext _localctx = new StatementblockContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(NEWLINE);
			State = 48; Match(INDENT);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 49; statement();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << LET) | (1L << ID))) != 0) || _la==NEWLINE );
			State = 54; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(RatParser.NEWLINE, 0); }
		public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(RatParser.SEMICOLON, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
			case LET:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 59;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LET:
					{
					State = 56; funcdef();
					}
					break;
				case IF:
					{
					State = 57; ifstmt();
					}
					break;
				case ID:
					{
					State = 58; funccall();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 61; Match(SEMICOLON);
					}
				}

				State = 64; Match(NEWLINE);
				}
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] EXPRSEPARATOR() { return GetTokens(RatParser.EXPRSEPARATOR); }
		public ITerminalNode EXPRSEPARATOR(int i) {
			return GetToken(RatParser.EXPRSEPARATOR, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 6, RULE_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; expression(0);
			State = 74;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 70; Match(EXPRSEPARATOR);
					State = 71; expression(0);
					}
					} 
				}
				State = 76;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public IfexprContext ifexpr() {
			return GetRuleContext<IfexprContext>(0);
		}
		public LeftoperatorContext leftoperator() {
			return GetRuleContext<LeftoperatorContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode ID() { return GetToken(RatParser.ID, 0); }
		public ITerminalNode COMPAREOPERATOR() { return GetToken(RatParser.COMPAREOPERATOR, 0); }
		public ZerooperatorContext zerooperator() {
			return GetRuleContext<ZerooperatorContext>(0);
		}
		public FirstoperatorContext firstoperator() {
			return GetRuleContext<FirstoperatorContext>(0);
		}
		public SecondoperatorContext secondoperator() {
			return GetRuleContext<SecondoperatorContext>(0);
		}
		public ThirdoperatorContext thirdoperator() {
			return GetRuleContext<ThirdoperatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 78; funccall();
				}
				break;
			case 2:
				{
				State = 79; ifexpr();
				}
				break;
			case 3:
				{
				State = 80; leftoperator();
				State = 81; expression(10);
				}
				break;
			case 4:
				{
				State = 83; @string();
				}
				break;
			case 5:
				{
				State = 84; @bool();
				}
				break;
			case 6:
				{
				State = 85; range();
				}
				break;
			case 7:
				{
				State = 86; number();
				}
				break;
			case 8:
				{
				State = 87; Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 109;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 90;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 91; Match(COMPAREOPERATOR);
						State = 92; expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 93;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 94; zerooperator();
						State = 95; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 97;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 98; firstoperator();
						State = 99; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 101;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 102; secondoperator();
						State = 103; expression(8);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 105;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 106; thirdoperator();
						State = 107; expression(7);
						}
						break;
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LeftoperatorContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(RatParser.NOT, 0); }
		public ITerminalNode MINUS() { return GetToken(RatParser.MINUS, 0); }
		public LeftoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterLeftoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitLeftoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftoperatorContext leftoperator() {
		LeftoperatorContext _localctx = new LeftoperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_leftoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZerooperatorContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(RatParser.SET, 0); }
		public ZerooperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zerooperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterZerooperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitZerooperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZerooperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZerooperatorContext zerooperator() {
		ZerooperatorContext _localctx = new ZerooperatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_zerooperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(SET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstoperatorContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(RatParser.ADD, 0); }
		public ITerminalNode OR() { return GetToken(RatParser.OR, 0); }
		public ITerminalNode MINUS() { return GetToken(RatParser.MINUS, 0); }
		public FirstoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFirstoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFirstoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstoperatorContext firstoperator() {
		FirstoperatorContext _localctx = new FirstoperatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_firstoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << ADD) | (1L << MINUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondoperatorContext : ParserRuleContext {
		public ITerminalNode PRODUCT() { return GetToken(RatParser.PRODUCT, 0); }
		public ITerminalNode DIVIDE() { return GetToken(RatParser.DIVIDE, 0); }
		public ITerminalNode AND() { return GetToken(RatParser.AND, 0); }
		public SecondoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterSecondoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitSecondoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondoperatorContext secondoperator() {
		SecondoperatorContext _localctx = new SecondoperatorContext(Context, State);
		EnterRule(_localctx, 16, RULE_secondoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << PRODUCT) | (1L << DIVIDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThirdoperatorContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(RatParser.IN, 0); }
		public ITerminalNode IS() { return GetToken(RatParser.IS, 0); }
		public ThirdoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thirdoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterThirdoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitThirdoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThirdoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThirdoperatorContext thirdoperator() {
		ThirdoperatorContext _localctx = new ThirdoperatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_thirdoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(RatParser.LET, 0); }
		public ITerminalNode ID() { return GetToken(RatParser.ID, 0); }
		public ITerminalNode LPARENTHESIS() { return GetToken(RatParser.LPARENTHESIS, 0); }
		public ITerminalNode RPARENTHESIS() { return GetToken(RatParser.RPARENTHESIS, 0); }
		public ITerminalNode SET() { return GetToken(RatParser.SET, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public FuncargsContext funcargs() {
			return GetRuleContext<FuncargsContext>(0);
		}
		public FuncdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFuncdef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFuncdef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefContext funcdef() {
		FuncdefContext _localctx = new FuncdefContext(Context, State);
		EnterRule(_localctx, 20, RULE_funcdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(LET);
			State = 125; Match(ID);
			State = 126; Match(LPARENTHESIS);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 127; funcargs();
				}
			}

			State = 130; Match(RPARENTHESIS);
			State = 131; Match(SET);
			State = 132; expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncargsContext : ParserRuleContext {
		public FuncargContext[] funcarg() {
			return GetRuleContexts<FuncargContext>();
		}
		public FuncargContext funcarg(int i) {
			return GetRuleContext<FuncargContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RatParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RatParser.COMMA, i);
		}
		public FuncargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcargs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFuncargs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFuncargs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncargsContext funcargs() {
		FuncargsContext _localctx = new FuncargsContext(Context, State);
		EnterRule(_localctx, 22, RULE_funcargs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; funcarg();
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 135; Match(COMMA);
					State = 136; funcarg();
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncargContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(RatParser.ID, 0); }
		public FuncargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcarg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFuncarg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFuncarg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncarg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncargContext funcarg() {
		FuncargContext _localctx = new FuncargContext(Context, State);
		EnterRule(_localctx, 24, RULE_funcarg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(RatParser.ID, 0); }
		public ITerminalNode LPARENTHESIS() { return GetToken(RatParser.LPARENTHESIS, 0); }
		public ExprargsContext exprargs() {
			return GetRuleContext<ExprargsContext>(0);
		}
		public ITerminalNode RPARENTHESIS() { return GetToken(RatParser.RPARENTHESIS, 0); }
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterFunccall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitFunccall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 26, RULE_funccall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(ID);
			State = 145; Match(LPARENTHESIS);
			State = 146; exprargs();
			State = 147; Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprargsContext : ParserRuleContext {
		public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RatParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RatParser.COMMA, i);
		}
		public ExprargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprargs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterExprargs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitExprargs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprargsContext exprargs() {
		ExprargsContext _localctx = new ExprargsContext(Context, State);
		EnterRule(_localctx, 28, RULE_exprargs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; expressions();
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 150; Match(COMMA);
					State = 151; expressions();
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfexprContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(RatParser.IF, 0); }
		public ITerminalNode LPARENTHESIS() { return GetToken(RatParser.LPARENTHESIS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPARENTHESIS() { return GetToken(RatParser.RPARENTHESIS, 0); }
		public ITerminalNode ELSE() { return GetToken(RatParser.ELSE, 0); }
		public IfexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterIfexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitIfexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexprContext ifexpr() {
		IfexprContext _localctx = new IfexprContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(IF);
			State = 158; Match(LPARENTHESIS);
			State = 159; expression(0);
			State = 160; Match(RPARENTHESIS);
			State = 161; expression(0);
			State = 162; Match(ELSE);
			State = 163; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(RatParser.IF, 0); }
		public ITerminalNode LPARENTHESIS() { return GetToken(RatParser.LPARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPARENTHESIS() { return GetToken(RatParser.RPARENTHESIS, 0); }
		public StatementblockContext[] statementblock() {
			return GetRuleContexts<StatementblockContext>();
		}
		public StatementblockContext statementblock(int i) {
			return GetRuleContext<StatementblockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(RatParser.ELSE, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(IF);
			State = 166; Match(LPARENTHESIS);
			State = 167; expression(0);
			State = 168; Match(RPARENTHESIS);
			State = 169; statementblock();
			State = 170; Match(ELSE);
			State = 171; statementblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(RatParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(RatParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 34, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ITerminalNode TWODOTS() { return GetToken(RatParser.TWODOTS, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 36, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; number();
			State = 176; Match(TWODOTS);
			State = 177; number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode QUOTEDSTRING() { return GetToken(RatParser.QUOTEDSTRING, 0); }
		public ITerminalNode DOUBLEQUOTEDSTRING() { return GetToken(RatParser.DOUBLEQUOTEDSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 38, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_la = TokenStream.LA(1);
			if ( !(_la==QUOTEDSTRING || _la==DOUBLEQUOTEDSTRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(RatParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(RatParser.DIGIT, i);
		}
		public ITerminalNode MINUS() { return GetToken(RatParser.MINUS, 0); }
		public ITerminalNode ADD() { return GetToken(RatParser.ADD, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRatListener typedListener = listener as IRatListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRatVisitor<TResult> typedVisitor = visitor as IRatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 40, RULE_number);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADD || _la==MINUS) {
				{
				State = 181;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 185;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 184; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x64', '\xC0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x6', '\x2', '.', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '/', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', 
		'\x3', '\x35', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x36', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '>', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\x41', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x46', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'K', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', 'N', '\v', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '[', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', 'p', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 's', 
		'\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x83', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x8C', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\x8F', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x9B', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x9E', '\v', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x5', '\x16', '\xB9', 
		'\n', '\x16', '\x3', '\x16', '\x6', '\x16', '\xBC', '\n', '\x16', '\r', 
		'\x16', '\xE', '\x16', '\xBD', '\x3', '\x16', '\x5', 'L', '\x8D', '\x9C', 
		'\x3', '\n', '\x17', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', '\x2', '\t', '\x4', '\x2', '\x18', '\x18', '&', '&', '\x5', 
		'\x2', '\x17', '\x17', '$', '$', '&', '&', '\x5', '\x2', '\x15', '\x15', 
		'(', '(', '*', '*', '\x3', '\x2', '\a', '\b', '\x3', '\x2', '\x37', '\x38', 
		'\x3', '\x2', '^', '_', '\x4', '\x2', '$', '$', '&', '&', '\x2', '\xC2', 
		'\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x4', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x45', '\x3', '\x2', '\x2', '\x2', '\b', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'Z', '\x3', '\x2', '\x2', '\x2', '\f', 't', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'v', '\x3', '\x2', '\x2', '\x2', '\x10', 'x', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'z', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x16', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x88', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x92', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x97', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x9F', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '$', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xB1', '\x3', '\x2', '\x2', '\x2', '(', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xB8', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x5', 
		'\x6', '\x4', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', 
		'\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x32', '\a', '\x61', '\x2', '\x2', '\x32', '\x34', '\a', '\x63', 
		'\x2', '\x2', '\x33', '\x35', '\x5', '\x6', '\x4', '\x2', '\x34', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\a', '\x64', '\x2', '\x2', '\x39', '\x5', '\x3', '\x2', '\x2', '\x2', 
		':', '>', '\x5', '\x16', '\f', '\x2', ';', '>', '\x5', '\"', '\x12', '\x2', 
		'<', '>', '\x5', '\x1C', '\xF', '\x2', '=', ':', '\x3', '\x2', '\x2', 
		'\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', 
		'\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\a', '\x1C', 
		'\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x61', '\x2', '\x2', '\x43', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x46', '\a', '\x61', '\x2', '\x2', '\x45', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\a', '\x3', '\x2', '\x2', '\x2', 'G', 'L', '\x5', '\n', '\x6', '\x2', 
		'H', 'I', '\a', '\x1D', '\x2', '\x2', 'I', 'K', '\x5', '\n', '\x6', '\x2', 
		'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'M', '\t', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\b', '\x6', '\x1', '\x2', 'P', '[', '\x5', '\x1C', '\xF', 
		'\x2', 'Q', '[', '\x5', ' ', '\x11', '\x2', 'R', 'S', '\x5', '\f', '\a', 
		'\x2', 'S', 'T', '\x5', '\n', '\x6', '\f', 'T', '[', '\x3', '\x2', '\x2', 
		'\x2', 'U', '[', '\x5', '(', '\x15', '\x2', 'V', '[', '\x5', '$', '\x13', 
		'\x2', 'W', '[', '\x5', '&', '\x14', '\x2', 'X', '[', '\x5', '*', '\x16', 
		'\x2', 'Y', '[', '\a', '\x1E', '\x2', '\x2', 'Z', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'Q', '\x3', '\x2', '\x2', '\x2', 'Z', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'U', '\x3', '\x2', '\x2', '\x2', 'Z', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\f', '\r', '\x2', '\x2', ']', '^', '\a', '\x3', '\x2', 
		'\x2', '^', 'p', '\x5', '\n', '\x6', '\xE', '_', '`', '\f', '\v', '\x2', 
		'\x2', '`', '\x61', '\x5', '\xE', '\b', '\x2', '\x61', '\x62', '\x5', 
		'\n', '\x6', '\f', '\x62', 'p', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\f', '\n', '\x2', '\x2', '\x64', '\x65', '\x5', '\x10', '\t', '\x2', 
		'\x65', '\x66', '\x5', '\n', '\x6', '\v', '\x66', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\f', '\t', '\x2', '\x2', 'h', 'i', '\x5', '\x12', '\n', 
		'\x2', 'i', 'j', '\x5', '\n', '\x6', '\n', 'j', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\f', '\b', '\x2', '\x2', 'l', 'm', '\x5', '\x14', '\v', 
		'\x2', 'm', 'n', '\x5', '\n', '\x6', '\t', 'n', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'o', '\\', '\x3', '\x2', '\x2', '\x2', 'o', '_', '\x3', '\x2', 
		'\x2', '\x2', 'o', '\x63', '\x3', '\x2', '\x2', '\x2', 'o', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'k', '\x3', '\x2', '\x2', '\x2', 'p', 's', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'r', '\v', '\x3', '\x2', '\x2', '\x2', 's', 'q', 
		'\x3', '\x2', '\x2', '\x2', 't', 'u', '\t', '\x2', '\x2', '\x2', 'u', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x31', '\x2', '\x2', 
		'w', '\xF', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\t', '\x3', '\x2', 
		'\x2', 'y', '\x11', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\t', '\x4', 
		'\x2', '\x2', '{', '\x13', '\x3', '\x2', '\x2', '\x2', '|', '}', '\t', 
		'\x5', '\x2', '\x2', '}', '\x15', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\a', '\x10', '\x2', '\x2', '\x7F', '\x80', '\a', '\x1E', '\x2', '\x2', 
		'\x80', '\x82', '\a', '\x32', '\x2', '\x2', '\x81', '\x83', '\x5', '\x18', 
		'\r', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x85', '\a', '\x33', '\x2', '\x2', '\x85', '\x86', '\a', '\x31', 
		'\x2', '\x2', '\x86', '\x87', '\x5', '\b', '\x5', '\x2', '\x87', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x8D', '\x5', '\x1A', '\xE', '\x2', 
		'\x89', '\x8A', '\a', '\x1F', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x1A', 
		'\xE', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', 
		'\a', '\x1E', '\x2', '\x2', '\x91', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x93', '\a', '\x1E', '\x2', '\x2', '\x93', '\x94', '\a', '\x32', 
		'\x2', '\x2', '\x94', '\x95', '\x5', '\x1E', '\x10', '\x2', '\x95', '\x96', 
		'\a', '\x33', '\x2', '\x2', '\x96', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x9C', '\x5', '\b', '\x5', '\x2', '\x98', '\x99', '\a', '\x1F', 
		'\x2', '\x2', '\x99', '\x9B', '\x5', '\b', '\x5', '\x2', '\x9A', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x4', '\x2', '\x2', 
		'\xA0', '\xA1', '\a', '\x32', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\n', 
		'\x6', '\x2', '\xA2', '\xA3', '\a', '\x33', '\x2', '\x2', '\xA3', '\xA4', 
		'\x5', '\n', '\x6', '\x2', '\xA4', '\xA5', '\a', '\x5', '\x2', '\x2', 
		'\xA5', '\xA6', '\x5', '\n', '\x6', '\x2', '\xA6', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\a', '\x4', '\x2', '\x2', '\xA8', '\xA9', 
		'\a', '\x32', '\x2', '\x2', '\xA9', '\xAA', '\x5', '\n', '\x6', '\x2', 
		'\xAA', '\xAB', '\a', '\x33', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x4', 
		'\x3', '\x2', '\xAC', '\xAD', '\a', '\x5', '\x2', '\x2', '\xAD', '\xAE', 
		'\x5', '\x4', '\x3', '\x2', '\xAE', '#', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\t', '\x6', '\x2', '\x2', '\xB0', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB2', '\x5', '*', '\x16', '\x2', '\xB2', '\xB3', '\a', '\x1A', 
		'\x2', '\x2', '\xB3', '\xB4', '\x5', '*', '\x16', '\x2', '\xB4', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\t', '\a', '\x2', '\x2', 
		'\xB6', ')', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB9', '\t', '\b', '\x2', 
		'\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBC', '\a', '\x39', '\x2', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x10', '/', '\x36', '=', '@', '\x45', 
		'L', 'Z', 'o', 'q', '\x82', '\x8D', '\x9C', '\xB8', '\xBD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);

}
